############################################################################################
#                                                                                          #
#    package build functions: configure, compile, install, rules, and custom functions     #
#                                                                                          #
############################################################################################

[ -z "$ASTERISK_COMPILE_FLAGS" ] && ASTERISK_COMPILE_FLAGS=0;
if [ "$ASTERISK_COMPILE_FLAGS" = "0" ]; then
  MY_FLAGS="-m32";
  [ "$KERNEL_ARCH" = "x86_64" ] && MY_FLAGS="-m64";
  CC_ARGS="-flto -fuse-linker-plugin -march=i486 -mtune=i686 -Os -pipe"
  [ "$KERNEL_ARCH" = "x86_64" ] && CC_ARGS="-flto -fuse-linker-plugin -mtune=generic -Os -pipe"
  [ -z "$CC" ] && CC="gcc $CC_ARGS" && export CC
  [ -z "$CXX" ] && CXX="g++ $CC_ARGS"
  [ ! -z "$CXX" ] && CXX="$CXX -fno-exceptions -fno-rtti";
  CFLAGS="$CFLAGS $MY_FLAGS";
  CXXFLAGS="$CXXFLAGS $MY_FLAGS";
  LDFLAGS="$LDFLAGS -z muldefs";
  ASTERISK_COMPILE_FLAGS=1
fi
export CC CXX CFLAGS CXXFLAGS LDFLAGS ASTERISK_COMPILE_FLAGS;

## configure
build_configure() {
  echo CC="$CC"
  echo CXX="$CXX"
  echo CFLAGS="$CFLAGS"
  echo CXXFLAGS="$CXXFLAGS"
  echo LDFLAGS="$LDFLAGS"
 
  ## autotools
  if [ "$KERNEL_ARCH" = "x86_64" ]; then
    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" \
    ./configure --disable-xmldoc \
      --with-pjproject-bundled || exit 1;
  else
    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" \
    ./configure --disable-xmldoc \
      --host=i686-linux-gnu --target=i686-linux-gnu \
      --with-pjproject-bundled || exit 1;
  fi
}

## compile
build_compile() {
  make menuselect-tree menuselect.makeopts >/dev/null;
  ./menuselect/menuselect --enable chan_sip menuselect.makeopts
  ./menuselect/menuselect --enable app_test menuselect.makeopts
  ./menuselect/menuselect --disable-category MENUSELECT_CORE_SOUNDS menuselect.makeopts
  ./menuselect/menuselect --disable-category MENUSELECT_MOH menuselect.makeopts
  ./menuselect/menuselect --disable-category MENUSELECT_EXTRA_SOUNDS menuselect.makeopts
  ./menuselect/menuselect --disable BUILD_NATIVE menuselect.makeopts

  local make_j=""
  if [ "$(free -m 2>&1|sed 's#\s\+# #g'|head -n2|tail -n1|cut -d\  -f2)" -ge "3600" ]; then
    make_j="$(cat /proc/cpuinfo|grep processor|wc -l)";
    make_j="$(eval $make_j + 1)";
    make_j="-j $make_j"
  fi

  CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" make $make_j|| return 1
}

include_addon() {
  local base_url="$1"
  local tarball="$2"

  wget --no-check-certificate "$base_url/$tarball" -O $tarball|| return 1
  tar -zxf $tarball || return 1;
  cd ${tarball%%.tar.gz}
  cp *.so "${I_ROOT}/usr/lib/asterisk/modules/" || return 1
  cp *.conf.sample "${I_ROOT}/etc/asterisk/"
  cd ..
}

## install
build_install() {
  mkdir -p "$I_ROOT"/var/lib/asterisk/sounds "$I_ROOT"/etc/init.d/
  make DESTDIR="$I_ROOT" install config samples || return 1
  install -Dm0755 "$PACKAGE_SOURCE_TOPDIR"/contrib/init.d/rc.slackware.asterisk "$I_ROOT"/etc/init.d/asterisk || return 1

  local arch_bits=${KERNEL_ARCH_DASH##x86-}
  local arch_full=$KERNEL_ARCH
  echo "Kernel arch: $KERNEL_ARCH"
  [ "$arch_full" = "x86" ] && arch_full="x86_32";
  # Get dpma
  local dpma_base_url="http://downloads.digium.com/pub/telephony/res_digium_phone"
  local dpma_tar=res_digium_phone-bundled-${ASTERISK_BRANCH}_${DPMA_VERSION}-$arch_full.tar.gz
  include_addon "$dpma_base_url/asterisk-${ASTERISK_BRANCH}/$KERNEL_ARCH_DASH" "$dpma_tar" || return 1
  # Get g729
  local base_url="http://downloads.digium.com/pub/telephony/codec_g729"
  local tarball="codec_g729a-${ASTERISK_BRANCH}_${G729_VERSION}-${arch_full}.tar.gz"
  if [ "${G729_VERSION##*.}" -le 7 ] && [ "${G729_VERSION%.*}" = "3.1" ]; then
    tarball="codec_g729a-${ASTERISK_BRANCH}_${G729_VERSION}-generic_${arch_bits}.tar.gz"
  fi
  include_addon "$base_url/asterisk-${ASTERISK_BRANCH}/$KERNEL_ARCH_DASH" "$tarball" || return 1
}

## rules
build_rules() {
   tet_load
   tet_download
   tet_convert
   tet_unpack
   tet_patch
   tet_configure
   tet_compile
   tet_install
   tet_split
   tet_strip
   tet_create
   tet_generate
   tet_check
   tet_test
   tet_package
   tet_encrypt
}

diff --git tools/xpp/perl_modules/Dahdi/Config/Gen.pm tools/xpp/perl_modules/Dahdi/Config/Gen.pm
index cc439de..9e698a4 100644
--- tools/xpp/perl_modules/Dahdi/Config/Gen.pm
+++ tools/xpp/perl_modules/Dahdi/Config/Gen.pm
@@ -215,6 +215,16 @@ sub new($) {
 		pri_termtype
 		pri_connection_type
 		em_signalling
+		loopback
+		patgen
+		bri_term
+		term_nt
+		term_te
+		disable_echo
+		timing_master
+		clear_channels
+		exclude_modules
+		span_separator
 		);
 	foreach my $k (@trivial) {
 		$gconfig->{$k} = $p->item($k);
@@ -237,6 +247,126 @@ sub run_generator($$@) {
 	if($@) {
 		die "Failed to load configuration generator for '$name': $@\n";
 	}
+	foreach my $key (keys %{$genopts}) {
+		$gconfig->{$key} = $genopts->{$key} if exists $gconfig->{$key};
+	}
+	# Determine span number ranges
+	my $spans_all = "";
+	my $spans_upper = "";
+	my $spans_lower = "";
+	my $sep = $gconfig->{'span_separator'};
+	my $sep_rx = qr/^\Q$sep/;
+	my $span_count = scalar(@spans);
+	foreach my $span (@spans) {
+		my $half = ( $span_count - ($span_count % 2) ) / 2;
+		if ($span->num > $half) {
+			$spans_upper .= $sep.$span->num;
+		} elsif ($span->num <= $half) {
+			$spans_lower .= $sep.$span->num;
+		}
+		$spans_all .= $sep.$span->num;
+	}
+	# Expand (upper_half, lower_half, all, 1) to span numbers
+	foreach my $p (qw(timing_master clear_channels term_nt term_te bri_term
+		loopback patgen disable_echo)
+	) {
+		next unless (exists($gconfig->{$p}));
+		next if ($gconfig->{$p} eq "" or $gconfig->{$p} eq "0");
+		if ($gconfig->{$p} =~ /^(all|1)$/i) {
+			$gconfig->{$p} = $spans_all;
+		} elsif ($gconfig->{$p} =~ /^(upper_half|half_all|half)$/i) {
+			$gconfig->{$p} = $spans_upper;
+		} elsif ($gconfig->{$p} =~ /^lower_half$/i) {
+			$gconfig->{$p} = $spans_lower;
+		}
+		my @fields = split(/\Q$sep/, $gconfig->{$p});
+		my @all_fields;
+		foreach my $field (@fields) {
+			unless ($field =~ /-/) {
+				if ($field =~ /^:/) {
+					push(@all_fields,
+						map {$_.$field} split(/\Q$sep/, $spans_all)
+					);
+					next;
+				}
+				push(@all_fields, $field);
+				next;
+			}
+			my ($rspans, $rchans) = split(/:/, $field);
+			my @allspans;
+			my @allchans;
+			if ($rspans =~ /-/) {
+				my ($m, $n) = split(/-/, $rspans);
+				$m = 1 unless $m;
+				unless ($n) {
+					if ($m <= @spans) {
+						$n = @spans + 1;
+					} else {
+						$n = $m + 1;
+					}
+				}
+				if ($m > $n) {
+					my $x = $m;
+					$m = $n;
+					$n = $x;
+				}
+				for (my $x = $m; $x <= $n; $x++) {
+					push(@allspans, $x);
+				}
+			} else {
+				push(@allspans, $rspans);
+			}
+			if ($rchans and $rchans =~ /-/) {
+				my ($m, $n) = split(/-/, $rchans);
+				$n = 32 unless $n;
+				$m = 1 unless $m;
+				if ($m > $n) {
+					my $x = $m;
+					$m = $n;
+					$n = $x;
+				}
+				for (my $x = $m; $x <= $n; $x++) {
+					push(@allchans, $x);
+				}
+			} else {
+        $rchans = "" unless $rchans;
+				push(@allchans, $rchans);
+			}
+			# Handle a ':m-n'
+			if (@allspans == 1 and $allspans[0] eq "") {
+				@allspans = split(/\Q$sep/, $spans_all);
+			}
+			foreach my $span (@allspans) {
+				# skip if span is '0' or ""
+				next unless $span;
+				if (@allchans == 1 and $allchans[0] eq "") {
+					push(@all_fields, $span);
+				}
+				else {
+					push(@all_fields, map {$span.':'.$_}  @allchans );
+				}
+			}
+		}
+		$gconfig->{$p} = join($sep, @all_fields);
+		# Ensure the field always starts with the separator for
+		# manually specified ranges
+		unless ($gconfig->{$p} =~ $sep_rx) {
+			$gconfig->{$p} = $sep.$gconfig->{$p};
+		}
+	}
+	# Handle config aliases
+	# loopback => timing_master = {}; clear_channels = {}; disable_echo = {};
+	# patgen => disable_echo = {}; clear_channels = {};
+	if (exists($gconfig->{'loopback'}) and $gconfig->{'loopback'}) {
+		$gconfig->{'timing_master'} = $gconfig->{'loopback'};
+		$gconfig->{'clear_channels'} = $gconfig->{'loopback'};
+		$gconfig->{'disable_echo'} = $gconfig->{'loopback'};
+	}
+	if (exists($gconfig->{'patgen'}) and $gconfig->{'patgen'}) {
+		$gconfig->{'clear_channels'} = $gconfig->{'patgen'};
+		$gconfig->{'disable_echo'} = $gconfig->{'patgen'};
+	}
+
 	my $cfg = $module->new($gconfig, $genopts);
 	$cfg->generate(@spans);
 }
diff --git tools/xpp/perl_modules/Dahdi/Config/Gen/Chandahdi.pm tools/xpp/perl_modules/Dahdi/Config/Gen/Chandahdi.pm
index 252b91e..455d096 100644
--- tools/xpp/perl_modules/Dahdi/Config/Gen/Chandahdi.pm
+++ tools/xpp/perl_modules/Dahdi/Config/Gen/Chandahdi.pm
@@ -43,7 +43,7 @@ sub gen_openr2($$$) {
 	my $gconfig = shift || die;
 	my $span = shift || die;
 	my $num = $span->num() || die;
-	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
+	my $termtype = $span->termtype() || die "$0: Span #$num -- unknown termtype [NT/TE]\n";
 	my $type = $span->type;
 	# Fake type for signalling
 	my $faketype = ($termtype eq 'TE') ? 'E1_TE' : 'E1_TE';
@@ -85,7 +85,7 @@ sub gen_cas($$$) {
 	my $gconfig = shift || die;
 	my $span = shift || die;
 	my $num = $span->num() || die;
-	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
+	my $termtype = $span->termtype() || die "$0: Span #$num -- unknown termtype [NT/TE]\n";
 	my $type = $span->type;
 	my $group = $gconfig->{'group'}{"$type"};
 	die "$0: missing default group (termtype=$termtype)\n" unless defined($group);
@@ -121,8 +121,8 @@ sub gen_digital($$$) {
 		printf "; Skipped: $gconfig->{'pri_connection_type'}\n\n";
 		return;
 	}
-	my $type = $span->type() || die "$0: Span #$num -- unkown type\n";
-	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
+	my $type = $span->type() || die "$0: Span #$num -- unknown type\n";
+	my $termtype = $span->termtype() || die "$0: Span #$num -- unknown termtype [NT/TE]\n";
 	my $group = $gconfig->{'group'}{"$type"};
 	my $context = $gconfig->{'context'}{"$type"};
 	my @to_reset = qw/context group/;
@@ -225,8 +225,21 @@ sub generate($) {
 ;
 
 HEAD
+	my $sep = quotemeta($gconfig->{'span_separator'});
 	foreach my $span (@spans) {
+		my $span_rx_str = $sep.$span->num;
+		$span_rx_str = qr/$span_rx_str($sep|$)/;
 		printf "; Span %d: %s %s\n", $span->num, $span->name, $span->description;
+		my $termtype = "";
+		if ($gconfig->{'term_nt'} =~ $span_rx_str) {
+			$termtype = "NT";
+		} elsif ($gconfig->{'term_te'} =~ $span_rx_str) {
+			$termtype = "TE";
+		}
+		if ($termtype) {
+			$span->set_termtype($termtype);
+			$span->softntte($termtype);
+		}
 		if($span->is_digital) {
 			if($span->is_pri) {
 				if($gconfig->{'pri_connection_type'} eq 'R2') {
diff --git tools/xpp/perl_modules/Dahdi/Config/Gen/Modules.pm tools/xpp/perl_modules/Dahdi/Config/Gen/Modules.pm
index c00e3eb..97f2d71 100644
--- tools/xpp/perl_modules/Dahdi/Config/Gen/Modules.pm
+++ tools/xpp/perl_modules/Dahdi/Config/Gen/Modules.pm
@@ -33,7 +33,20 @@ sub generate($$$) {
 	print  "# If you edit this file and execute $0 again,\n";
 	print  "# your manual changes will be LOST.\n";
 	my @drivers = Dahdi::Hardware->drivers;
-	print join("\n", @drivers),"\n";
+	# Remove any excluded modules
+	my $drivers_str = join("\n", @drivers);
+	if ($gconfig->{'exclude_modules'} ne "") {
+		my $sep = quotemeta($gconfig->{'span_separator'});
+		$sep = qr/$sep/;
+		my @excludes = split($sep, $gconfig->{'exclude_modules'});
+		foreach my $exclude (@excludes) {
+			next unless $exclude;
+			$drivers_str =~ s/(^|\n)$exclude(\n|$)/\n/;
+		}
+		$drivers_str =~ s/\n\n/\n/;
+	}
+
+	print $drivers_str,"\n";
 	close F;
 	select $old;
 }
diff --git tools/xpp/perl_modules/Dahdi/Config/Gen/System.pm tools/xpp/perl_modules/Dahdi/Config/Gen/System.pm
index cb7b14b..fc3ec2b 100644
--- tools/xpp/perl_modules/Dahdi/Config/Gen/System.pm
+++ tools/xpp/perl_modules/Dahdi/Config/Gen/System.pm
@@ -18,12 +18,17 @@ sub new($$$) {
 }
 
 my $bri_te_last_timing = 1;
+my $te_last_name = "";
 
 sub print_echo_can($$) {
 	my $gconfig = shift || die;
 	my $chans = shift || die; # channel or range of channels.
 	my $echo_can = $gconfig->{'echo_can'};
 	return if !defined($echo_can) || $echo_can eq 'none';
+	# Don't print echocanceller line if requested disabling
+	if (exists($gconfig->{'chan_disable_echo'})) {
+		return if $gconfig->{'chan_disable_echo'};
+	}
 
 	print "echocanceller=$echo_can,$chans\n";
 }
@@ -41,7 +46,7 @@ sub gen_t1_cas($$) {
 	my $pri_connection_type = $gconfig->{pri_connection_type} || die;
 	die "Span #$num is analog" unless $span->is_digital();
 	die "Span #$num is not CAS" unless $span->is_pri && $pri_connection_type eq 'CAS';
-	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
+	my $termtype = $span->termtype() || die "$0: Span #$num -- unknown termtype [NT/TE]\n";
 	my $timing;
 	my $lbo = 0;
 	my $framing = $gconfig->{tdm_framing};
@@ -55,7 +60,21 @@ sub gen_t1_cas($$) {
 	$span_crc4 = (defined $span_crc4) ? ",$span_crc4" : '';
 	my $span_yellow = $span->yellow();
 	$span_yellow = (defined $span_yellow) ? ",$span_yellow" : '';
-	$timing = ($termtype eq 'NT') ? 0 : $bri_te_last_timing++;
+	my $sep = quotemeta($gconfig->{'span_separator'});
+	my $span_rx_str = $sep.$span->num;
+	$span_rx_str = qr/$span_rx_str($sep|$)/;
+	# Timing starts over at 1 every time we start on a new card
+	my $span_basename = $span->name;
+	$span_basename =~ s/\/[0-9]+$//;
+	if ($te_last_name ne $span_basename) {
+		$bri_te_last_timing = 1;
+		$te_last_name = $span_basename;
+	}
+	if ($gconfig->{'timing_master'} =~ $span_rx_str) {
+		$timing = 0;
+	} else {
+		$timing = ($termtype eq 'NT') ? 0 : $bri_te_last_timing++;
+	}
 	printf "span=%d,%d,%d,%s,%s%s%s\n",
 			$num,
 			$timing,
@@ -68,14 +87,25 @@ sub gen_t1_cas($$) {
 	my $dchan_type;
 	my $chan_range;
 	if($span->is_pri()) {
+		$chan_range = Dahdi::Config::Gen::bchan_range($span);
 		if ($pri_connection_type eq 'PRI') {
-			$chan_range = Dahdi::Config::Gen::bchan_range($span);
-			printf "bchan=%s\n", $chan_range;
-			my $dchan = $span->dchan();
-			printf "dchan=%d\n", $dchan->num();
+			# Only do clear channels for PRI
+			if ($gconfig->{'clear_channels'} =~ $span_rx_str) {
+				if ($span->proto ne "E1") {
+					$chan_range = Dahdi::Config::Gen::channo_range(
+						(Dahdi::Config::Gen::parse_chan_range($chan_range),
+						$span->dchan()->num())
+					);
+				}
+				printf "clear=%s\n", $chan_range;
+			}
+			else {
+				printf "bchan=%s\n", $chan_range;
+				my $dchan = $span->dchan();
+				printf "dchan=%d\n", $dchan->num();
+			}
 		} elsif ($pri_connection_type eq 'R2' ) {
 			my $idle_bits = $gconfig->{'r2_idle_bits'};
-			$chan_range = Dahdi::Config::Gen::bchan_range($span);
 			printf "cas=%s:$idle_bits\n", $chan_range;
 		} elsif ($pri_connection_type eq 'CAS' ) {
 			my $type = ($termtype eq 'TE') ? 'FXO' : 'FXS';
@@ -102,7 +132,7 @@ sub gen_digital($$$) {
 	my $span = shift || die;
 	my $num = $span->num() || die;
 	die "Span #$num is analog" unless $span->is_digital();
-	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
+	my $termtype = $span->termtype() || die "$0: Span #$num -- unknown termtype [NT/TE]\n";
 	my $timing;
 	my $lbo = 0;
 	my $framing = $span->framing() || die "$0: No framing information for span #$num\n";
@@ -121,7 +151,28 @@ sub gen_digital($$$) {
 		$span_crc4 = '';
 		$framing = 'cas';
 	}
-	$timing = ($termtype eq 'NT') ? 0 : $bri_te_last_timing++;
+	my $sep = quotemeta($gconfig->{'span_separator'});
+	my $span_rx_str = $sep.$span->num;
+	$span_rx_str = qr/$span_rx_str($sep|$)/;
+	# Timing starts over at 1 every time we start on a new card
+	my $span_basename = $span->name;
+	$span_basename =~ s/\/[0-9]+$//;
+	if ($te_last_name ne $span_basename) {
+		$bri_te_last_timing = 1;
+		$te_last_name = $span_basename;
+	}
+	if ($gconfig->{'timing_master'} =~ $span_rx_str) {
+		$timing = 0;
+	} else {
+		$timing = ($termtype eq 'NT') ? 0 : $bri_te_last_timing++;
+	}
+	# If bri_term is set, then apply iff it is set for this span
+	if ($gconfig->{'bri_term'} =~ $span_rx_str) {
+		$span_termination = ',term';
+	} elsif ($gconfig->{'bri_term'} !~ /^0$/) {
+		$span_termination = '';
+	}
+
 	printf "span=%d,%d,%d,%s,%s%s%s%s%s\n",
 			$num,
 			$timing,
@@ -158,13 +209,26 @@ sub gen_digital($$$) {
 		my $dchan = $span->dchan();
 		printf "$dchan_type=%d\n", $dchan->num();
 	} elsif($span->is_pri()) {
+		my $chan_range = Dahdi::Config::Gen::bchan_range($span);
 		if ($gconfig->{'pri_connection_type'} eq 'PRI') {
-			printf "bchan=%s\n", Dahdi::Config::Gen::bchan_range($span);
-			my $dchan = $span->dchan();
-			printf "dchan=%d\n", $dchan->num();
+			# Only do clear channels for PRI
+			if ($gconfig->{'clear_channels'} =~ $span_rx_str) {
+				if ($span->proto ne "E1") {
+					$chan_range = Dahdi::Config::Gen::channo_range(
+						(Dahdi::Config::Gen::parse_chan_range($chan_range),
+						$span->dchan()->num())
+					);
+				}
+				printf "clear=%s\n", $chan_range;
+			}
+			else {
+				printf "bchan=%s\n", $chan_range;
+				my $dchan = $span->dchan();
+				printf "dchan=%d\n", $dchan->num();
+			}
 		} elsif ($gconfig->{'pri_connection_type'} eq 'R2' ) {
 			my $idle_bits = $gconfig->{'r2_idle_bits'};
-			printf "cas=%s:$idle_bits\n", Dahdi::Config::Gen::bchan_range($span);
+			printf "cas=%s:$idle_bits\n", $chan_range;
 			printf "dchan=%d\n", $span->dchan()->num();
 		}
 	} else {
@@ -218,8 +282,26 @@ sub generate($$$) {
 # This file is parsed by the Dahdi Configurator, dahdi_cfg
 #
 HEAD
+	my $sep = quotemeta($gconfig->{'span_separator'});
+	$gconfig->{'chan_disable_echo'} = 0;
 	foreach my $span (@spans) {
+		my $span_num_str = $sep.$span->num;
+		my $span_rx_str = qr/$span_num_str($sep|$)/;
 		printf "# Span %d: %s %s\n", $span->num, $span->name, $span->description;
+		my $termtype = "";
+		if ($gconfig->{'term_nt'} =~ $span_rx_str) {
+			$termtype = "NT";
+		} elsif ($gconfig->{'term_te'} =~ $span_rx_str) {
+			$termtype = "TE";
+		}
+		if ($termtype) {
+			$span->set_termtype($termtype);
+			$span->softntte($termtype);
+		}
+		# Handle disabling echo_canceller for this span
+		if ($gconfig->{'disable_echo'} =~ $span_rx_str) {
+			$gconfig->{'chan_disable_echo'} = 1;
+		}
 		if($span->is_digital) {
 			if($span->is_pri) {
 				if($gconfig->{'pri_connection_type'} eq 'CAS') {
@@ -239,10 +321,20 @@ HEAD
 						unless defined $type;
 					$chan->type($type);
 				}
+				my $chan_rx_str = '('.$span_num_str.'|'.
+					$span_num_str.':'.$chan->num.')';
+				$chan_rx_str = qr/$chan_rx_str($sep|$)/;
+				# Handle disabling echo_canceller for this channel if needed
+				if ($gconfig->{'disable_echo'} =~ $chan_rx_str) {
+					$gconfig->{'chan_disable_echo'} = 1;
+				}
 				gen_signalling($gconfig, $chan);
+				# Restore disabling echocan to false
+				$gconfig->{'chan_disable_echo'} = 0;
 			}
 		}
 		print "\n";
+		$gconfig->{'chan_disable_echo'} = 0;
 	}
 	print <<"TAIL";
 # Global data
diff --git tools/xpp/perl_modules/Dahdi/Config/Params.pm tools/xpp/perl_modules/Dahdi/Config/Params.pm
index 0cc0d88..f83b508 100644
--- tools/xpp/perl_modules/Dahdi/Config/Params.pm
+++ tools/xpp/perl_modules/Dahdi/Config/Params.pm
@@ -116,6 +116,16 @@ sub item($$@) {
 			pri_connection_type	=> 'PRI',
 			r2_idle_bits		=> '1101',
 			tdm_framing		=> 'esf',
+			loopback		=> '0',
+			patgen			=> '0',
+			term_nt			=> '0',
+			term_te			=> '0',
+			bri_term		=> '0',
+			timing_master		=> '0',
+			disable_echo		=> '0',
+			clear_channels		=> '0',
+			exclude_modules		=> '',
+			span_separator		=> '+',
 			'pri_termtype'		=> [ 'SPAN/* TE' ],
 		);
 	return $self->{$key} if exists($self->{$key}) or $options{NODEFAULTS};
@@ -153,4 +163,3 @@ sub dump($) {
 }
 
 1;
-
